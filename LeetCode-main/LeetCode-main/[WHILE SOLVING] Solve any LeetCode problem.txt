Solve any LeetCode problem.




1. UNDERSTANDING THE PROBLEM:
o Identify Input Requirements:
	§ Determine the specific inputs required, including data types and potential size constraints. [array of numbers nums]
	§ Understand the format of the input data and how it will be provided (e.g., as arrays, strings, integers). [array of integers]
	§ Consider any limitations on input size or data format.
o Define Output Expectations: [ans, nums + nums, nums repeated twice, length(ans) = length(nums) * 2]
	§ Determine the exact format and content of the output expected from the solution [array]
	§ Understand any constraints or limitations on the output, such as data type or size restrictions.
o Analyze Complexity:
	§ Consider how the size of the input data could impact space and time complexity. [some factor of n]
	§ Evaluate any potential edge cases or special scenarios that may affect complexity analysis. [empty array, invalid input]



2. DEVISING A PLAN:
o Select Appropriate Algorithms and Data Structures:
	§ Research and identify suitable algorithms or data structures for solving the problem efficiently. [array(list), integers] 
	§ Evaluate the advantages and disadvantages of different approaches, considering space and time complexity.
o Assess Space and Time Complexity:
	§ Analyze the space and time complexity of each chosen algorithm or data structure. 
	§ Consider trade-offs between different approaches, such as ease of implementation versus efficiency.
o Explore Optimization Techniques:
	§ Identify opportunities for optimization to improve space or time efficiency.
	§ Implement techniques to minimize unnecessary space usage and enhance time efficiency where possible.
o Draw figures, if your mental space isn't large enough.	 
o Comment your steps in code.


3. CARRYING OUT THE PLAN:
o Implement the Solution:
	§ Write code to implement the chosen solution using the selected algorithms and data structures.
	§ Ensure efficient utilization of space and time resources during implementation.
o Analyze Performance:
	§ Perform a detailed analysis of the space and time complexity of the implemented solution.
	§ Test the solution with various inputs to validate correctness and assess performance under different conditions.


4. LOOKING BACK:
o Evaluate Solution Efficiency:
	§ Assess the space and time complexity of the implemented solution against desired performance criteria. [O(2n)=O(n) time and space complexity]
	§ Reflect on the effectiveness of the chosen algorithms and data structures in achieving efficiency goals [as efficient as possible]
o Identify Optimization Opportunities:
	§ Consider areas for further optimization to enhance space or time efficiency, if necessary.
	§ Reflect on lessons learned from the problem-solving process, including insights into complexity analysis.


